import tpIntegrador.*

describe "Guitarra Fender" {

    test "una Fender está afinada" {
        const fender = new GuitarraFender()
        assert.equals(true, fender.afinado())
    }

    test "el costo de una Fender negra es 15" {
        const fender = new GuitarraFender()
        assert.equals(15, fender.costo())
    }

    test "el costo de una Fender roja es 10" {
        const fender = new GuitarraFender(color = "rojo")
        assert.equals(10, fender.costo())
    }

    test "una Fender es valiosa" {
        const fender = new GuitarraFender()
        assert.equals(true, fender.esValioso())
    }
}
describe "Trompeta Jupiter" {

    test "a 19 grados no está afinada" {
        const trompeta = new TrompetaJupiter(temperatura = 19)
        assert.equals(false, trompeta.afinado())
    }

    test "a 22 grados está afinada" {
        const trompeta = new TrompetaJupiter(temperatura = 22)
        assert.equals(true, trompeta.afinado())
    }

    test "a 25 grados no está afinada" {
        const trompeta = new TrompetaJupiter(temperatura = 25)
        assert.equals(false, trompeta.afinado())
    }

    test "si la temperatura era incorrecta y afino, queda afinada" {
        const trompeta = new TrompetaJupiter(temperatura = 19)
        trompeta.afinar("Pepe")
        assert.equals(true, trompeta.afinado())
    }

    test "si la temperatura es correcta y la desafino, ya no está afinada" {
        const trompeta = new TrompetaJupiter(temperatura = 18)
        assert.equals(false, trompeta.afinado())
    }

    test "la trompeta Jupiter no es valiosa si no está afinada" {
        const trompeta = new TrompetaJupiter(temperatura = 19)
        assert.equals(false, trompeta.esValioso())
    }

    test "la trompeta Jupiter es valiosa si está afinada" {
        const trompeta = new TrompetaJupiter()
        assert.equals(true, trompeta.esValioso())
    }
}
describe "Piano Bechstein" {
    test "el piano en una habitación de 5x5 está afinado" {
        const piano = new PianoBechstein()
        assert.equals(true, piano.afinado())
    }
        test "el piano en una habitación chica no está afinado" {
            const piano = new PianoBechstein(anchoHabitacion = 4, largoHabitacion = 5)
            assert.equals(false, piano.afinado())
        }
        test "El costo del piano en la habitacion de 5x5 es de 10" {
        const piano = new PianoBechstein()
        assert.equals(10, piano.costo())
        }
        test "el piano es valioso en la habitación inicial de 5x5" {
            const piano = new PianoBechstein()
            assert.equals(true, piano.esValioso())
        }
        test "el piano movido a una habitación chica no es valioso" {
            const piano = new PianoBechstein(anchoHabitacion = 4, largoHabitacion = 5)
            assert.equals(false, piano.esValioso())
        }

}

describe "Violin Stagg" {
	test "El violín Stagg comienza afinado (0 trémolos)" {

		const violin = new ViolinStagg()
		assert.equals(true, violin.afinado())
	}
	test "El violín con 9 trémolos todavía está afinado" {
		const violin = new ViolinStagg(tremolo = 9)
		assert.equals(true, violin.afinado())
	}
	test "El violín luego de 10 trémolos exactos, queda desafinado" {
		const violin = new ViolinStagg(tremolo = 10)
		assert.equals(false, violin.afinado())
	}
	test "El violín tiene un costo inicial de 20 chelines (sin trémolos)" {
		const violin = new ViolinStagg()
		const costoBase = 20
		assert.equals(20, violin.costo())
	}
	test "Con exactamente 2 trémolos, el violín tiene un costo de 18 chelines" {
		const violin = new ViolinStagg(tremolo = 2)
		assert.equals(18, violin.costo())
	}
	test "Con 10 trémolos, el violín tiene un costo de 15 chelines (nunca baja de 15)" {
		const violin = new ViolinStagg(tremolo = 10)
		assert.equals(15, violin.costo())
	}
	test "Pintado con “laca acrílica”, el violín es valioso" {
		const violin = new ViolinStagg( pintura = 'laca acrilica')
		assert.equals(true, violin.esValioso())
	}
	test "Pintado con “látex satinado”, el violín no es valioso" {
		const violin = new ViolinStagg(pintura ='latex satinado' )	
        assert.equals(false, violin.esValioso())
	}
}
describe "test punto 2" {
    test "Johann es feliz con una trompeta Jupiter" {
        assert.equals(true,johann.esFeliz())
    }
    test "Johann no es feliz con un violin Stagg (sin tremolos, costo 20)" {
        const violin = new ViolinStagg() 
        johann.cambiarInstrumento(violin) 
        assert.equals(false,johann.esFeliz())
    }
    test "Wolfgang es feliz si Johann tiene una trompeta Jupiter" {
        assert.equals(true,johann.esFeliz()) 
        assert.equals(true,wolfgang.esFeliz())
    }
    test "Wolfgang no es feliz si Johann tiene un violin Stagg (costo 20)" {
        const violin = new ViolinStagg() 
        johann.cambiarInstrumento(violin) 
        assert.equals(false,wolfgang.esFeliz()) 
    }
	test "Giuseppe es feliz con una guitarra Fender (que está siempre afinada)" {
		giuseppe.cambiarInstrumento(new GuitarraFender())
		const resultado = giuseppe.esFeliz()
		assert.equals(true, resultado)
	}
	test "Giuseppe no es feliz con un piano Bechstein en una habitación de un metro cuadrado" {
		giuseppe.cambiarInstrumento(new PianoBechstein(anchoHabitacion = 1, largoHabitacion = 1))
		assert.equals(false, giuseppe.esFeliz())
	}
	test "Maddalena con el violín Stagg sin trémolos es feliz (costo 20, es par)" {
		const violin = new ViolinStagg(tremolo = 0)
        maddalena.cambiarInstrumento(violin)
        const resultado = maddalena.esFeliz()
        assert.equals(true, resultado)
	}
	test "Maddalena con el violín Stagg con un trémolo no es feliz (costo 19, es impar)" {
		const violin = new ViolinStagg(tremolo = 1)
    	maddalena.cambiarInstrumento(violin)
        assert.equals(false, maddalena.esFeliz())
	}
	test "En la asociación con Johann con violín Stagg, Wolfgang, Giuseppe con su guitarra Fender y Maddalena con su violín Stagg original, los felices son Giuseppe y Maddalena" {
    const asociacion = new AsociacioMusical()
    johann.cambiarInstrumento(new ViolinStagg())
    giuseppe.cambiarInstrumento(new GuitarraFender())
    maddalena.cambiarInstrumento(new ViolinStagg())
    asociacion.musicos().addAll([johann, wolfgang, giuseppe, maddalena])
    assert.equals([giuseppe, maddalena], asociacion.sonFelices())
}


}
//--------test punto 3--------//
describe "test punto 3" {

    test "Musico experto: Su preferencia coincide con la familia del instrumento" {
            const instrumento = new GuitarraFender() 
            const musicoExperto = new Musico(familiaPreferida = 'cuerda', instrumento = instrumento, nombre = 'Cuerdista')
            assert.equals(true, musicoExperto.esExperto())
    }
    test "Un músico cuya preferencia de familia no coincida con la del instrumento no es experto" {
		const instrumento = new TrompetaJupiter() 
        const musico = new Musico(familiaPreferida = 'cuerda', instrumento = instrumento, nombre = 'Novato')
        assert.equals(false, musico.esExperto())
    }
    test "Un músico feliz porque la trompeta Júpiter tiene sordina y es copada" {
		const trompetaCopada = new TrompetaJupiter() 
        const musico = new Musico(familiaPreferida = 'viento', instrumento = trompetaCopada, nombre = 'MusicoFeliz')
        assert.equals(true, musico.esFeliz())
	}
	test "Un músico que no es feliz porque la trompeta Júpiter no tiene sordina y no es copada." {
		const trompetaNoCopada = new TrompetaJupiter(sordina = false) 
        const musico = new Musico(familiaPreferida = 'viento', instrumento = trompetaNoCopada, nombre = 'MusicoTriste')
        assert.equals(false, musico.esFeliz())
	}
	test "Un músico común no es feliz ni para el violín Stagg ni para la guitarra Fender." {
		const violin = new ViolinStagg() 
        const musicoViolin = new Musico(familiaPreferida = 'cuerda', instrumento = violin, nombre = 'MusicoViolin')
        const guitarra = new GuitarraFender()
        const musicoGuitarra = new Musico(familiaPreferida = 'cuerda', instrumento = guitarra, nombre = 'MusicoGuitarra')
        assert.equals(false, musicoViolin.esFeliz())
        assert.equals(false, musicoGuitarra.esFeliz()) 
	}
    test "Musico comun es feliz con piano Bechstein si al menos una dimension es mayor a 6" {
        const pianoCopado = new PianoBechstein(anchoHabitacion = 7, largoHabitacion = 5) 
        const musico = new Musico(familiaPreferida = 'cuerda', instrumento = pianoCopado, nombre = 'PianistaFeliz')
        assert.equals(true, musico.esFeliz())
    }
    test "Musico comun no es feliz si la habitacion no es lo suficientemente ancha ni larga" {
        const pianoNoCopado = new PianoBechstein(anchoHabitacion = 5, largoHabitacion = 5) 
        const musico = new Musico(familiaPreferida = 'cuerda', instrumento = pianoNoCopado, nombre = 'PianistaTriste')
        assert.equals(false, musico.esFeliz())
    }
    test "Musico con preferencia percusión no es feliz con cuerdas" {
        const instrumento = new GuitarraFender() 
        const musicoPercusion = new Musico(familiaPreferida = 'percusión', instrumento = instrumento, nombre = 'Percu')
        assert.equals(false,musicoPercusion.esExperto()) 
        assert.equals(false,musicoPercusion.esFeliz()) 
    }
    test "No se puede agregar dos veces el mismo músico" {
        const orquesta =
        new Orquesta(
            cantidadMaxima = 5
        )
        
        const musico = new Musico(
            nombre = "Johann",
            familiaPreferida = "viento",
            instrumento = new TrompetaJupiter()
        )
        const musicosSet = null
        orquesta.musicos()
        orquesta.agregarMusico(
            musico
        )
        orquesta.agregarMusico(
            musico
        )
        assert.equals(
            1,
            orquesta.musicos().size()
        )
    }
    test "No se puede agregar más músicos del permitido" {
        const orquesta = new Orquesta(cantidadMaxima = 3)
        const m1 = new Musico(nombre = "Johann", familiaPreferida = "viento", instrumento = new TrompetaJupiter())
        const m2 = new Musico(nombre = "Wolfgang", familiaPreferida = "viento", instrumento = new TrompetaJupiter())
        const m3 = new Musico(nombre = "Giuseppe", familiaPreferida = "cuerda", instrumento = new GuitarraFender())

        orquesta.agregarMusico(m1)
        orquesta.agregarMusico(m2)
        orquesta.agregarMusico(m3)  

        assert.equals(2, orquesta.musicos().size())
    }
    test "El caso positivo de poder agregar más músicos, aunque puede estar contemplado en los casos anteriores" {
        const orquesta = new Orquesta(cantidadMaxima = 3)
        const m1 = new Musico(nombre = "Johann", familiaPreferida = "viento", instrumento = new TrompetaJupiter())
        const m2 = new Musico(nombre = "Wolfgang", familiaPreferida = "cuerda", instrumento = new ViolinStagg())

        orquesta.agregarMusico(m1)
        orquesta.agregarMusico(m2)

        assert.equals(2, orquesta.musicos().size())
    }
    test "Una orquesta está bien conformada cuando todos sus músicos son felices" {
        const orquesta = new Orquesta(cantidadMaxima = 4)
        const m1 = new Musico(nombre = "Johann", familiaPreferida = "viento", instrumento = new TrompetaJupiter())
        const m2 = new Musico(nombre = "Giuseppe", familiaPreferida = "cuerda", instrumento = new GuitarraFender())
        const m3 = new Musico(nombre = "Maddalena", familiaPreferida = "cuerda", instrumento = new ViolinStagg())

        orquesta.agregarMusico(m1)
        orquesta.agregarMusico(m2)
        orquesta.agregarMusico(m3)
        assert.equals(false, orquesta.bienConformada())
    }
    test "Una orquesta no está bien conformada si algún músico no es feliz" {
        const orquesta = new Orquesta(cantidadMaxima = 4)
        const m1 = new Musico(nombre = "Johann", familiaPreferida = "viento", instrumento = new ViolinStagg()) 
        const m2 = new Musico(nombre = "Giuseppe", familiaPreferida = "cuerda", instrumento = new GuitarraFender())

        orquesta.agregarMusico(m1)
        orquesta.agregarMusico(m2)

        const resultado = orquesta.bienConformada()
        assert.equals(false, resultado)
    }
}
//--------test punto 4--------//
test "El instrumento genérico no es copado" {
    const instrumento = new InstrumentoGenerico(familia = "cuerdas")
	const resultado = instrumento.esCopado()
	
    assert.equals(false, resultado)
}

    test "El costo de un instrumento de cuerdas con número aleatorio par debe dar 14" {
    const instrumento =
    new InstrumentoGenerico(
        familia = "cuerdas"
    )
    
    const rangoOriginal =
    1 .. 10
    rangoOriginal.anyOne()
    assert.equals(
        14,
        instrumento.costo()
    )
    }


test "El costo de un instrumento de cuerdas con número aleatorio impar debe dar 21" {
    const instrumento =
    new InstrumentoGenerico(
        familia = "cuerdas"
    )
    
    const rangoOriginal = 1 .. 10
    rangoOriginal.anyOne()
    assert.equals(21, instrumento.costo())
    }
//------test punto 5------//
describe "test punto 5" {
test "No se puede hacer el proceso de revisión si el técnico no es especialista en esa familia" {
    var tecnico = new Musico(
        familiaPreferida = "cuerda",
        instrumento = new ViolinStagg(),
        nombre = "Juan"
    )
    var piano = new PianoBechstein()
    
    piano.afinar(tecnico)
    
    assert piano.ultimaAfinacion().tecnico() != tecnico
    }
test "No se puede afinar un instrumento si pasó menos de una semana" {
    var tecnico = new Musico(familiaPreferida = "cuerda", instrumento = new ViolinStagg(), nombre = "Ana")
    var violin = new ViolinStagg()
    violin.registrarAfinacion(tecnico)

    violin.afinar(tecnico)
    assert violin.afinacionesRecientes().size() == 1
}

test "Al revisar el instrumento se genera una nueva revisión con fecha de hoy y el técnico correspondiente" {
    var tecnico = new Musico(familiaPreferida = "cuerda", instrumento = new ViolinStagg(), nombre = "Luis")
    var violin = new ViolinStagg()

    violin.afinar(tecnico)

    const ultima = violin.ultimaAfinacion()
    const fechaHoy = new Fecha(anio = 2025, mes = 10, dia = 9)
    assert ultima.fecha().esIgualA(fechaHoy)
    assert ultima.tecnico() == tecnico
}

test "Al ejecutar el proceso de revisión para el piano Bechstein desafinado, al terminar queda afinado" {
    var tecnico = new Musico(familiaPreferida = "cuerda", instrumento = new PianoBechstein(), nombre = "Pedro")
    var piano = new PianoBechstein(anchoHabitacion= 3, largoHabitacion = 3)

    piano.afinar(tecnico)

    assert.equals(true,piano.afinado())
}

test "Al ejecutar el proceso de revisión para la trompeta Jupiter desafinada, al terminar queda afinada" {
    var tecnico = new Musico(familiaPreferida = "viento", instrumento = new TrompetaJupiter(), nombre = "Marta")
    var trompeta = new TrompetaJupiter(temperatura = 15)

    trompeta.afinar(tecnico)
    assert.equals(true,trompeta.afinado())
}
}









